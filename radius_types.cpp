/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "radius_types.h"

#include <algorithm>

namespace RadiusThrift {

const char* RadiusAvp::ascii_fingerprint = "A6609EAC7CD2A291DFDA43A4A8D65B03";
const uint8_t RadiusAvp::binary_fingerprint[16] = {0xA6,0x60,0x9E,0xAC,0x7C,0xD2,0xA2,0x91,0xDF,0xDA,0x43,0xA4,0xA8,0xD6,0x5B,0x03};

uint32_t RadiusAvp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RadiusAvp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RadiusAvp");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RadiusAvp &a, RadiusAvp &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
}

const char* RadiusRequest::ascii_fingerprint = "BF861F514ADD40D94AF267398B23A074";
const uint8_t RadiusRequest::binary_fingerprint[16] = {0xBF,0x86,0x1F,0x51,0x4A,0xDD,0x40,0xD9,0x4A,0xF2,0x67,0x39,0x8B,0x23,0xA0,0x74};

uint32_t RadiusRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->captureTimestamp);
          this->__isset.captureTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceId);
          this->__isset.sourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->avpRequestList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->avpRequestList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->avpRequestList[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.avpRequestList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->avpResponseList.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->avpResponseList.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->avpResponseList[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.avpResponseList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RadiusRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RadiusRequest");

  xfer += oprot->writeFieldBegin("captureTimestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->captureTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->sourceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avpRequestList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->avpRequestList.size()));
    std::vector<RadiusAvp> ::const_iterator _iter10;
    for (_iter10 = this->avpRequestList.begin(); _iter10 != this->avpRequestList.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avpResponseList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->avpResponseList.size()));
    std::vector<RadiusAvp> ::const_iterator _iter11;
    for (_iter11 = this->avpResponseList.begin(); _iter11 != this->avpResponseList.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RadiusRequest &a, RadiusRequest &b) {
  using ::std::swap;
  swap(a.captureTimestamp, b.captureTimestamp);
  swap(a.sourceId, b.sourceId);
  swap(a.avpRequestList, b.avpRequestList);
  swap(a.avpResponseList, b.avpResponseList);
  swap(a.__isset, b.__isset);
}

} // namespace
