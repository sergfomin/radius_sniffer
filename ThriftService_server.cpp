// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ThriftService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <fstream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::RadiusThrift;

class ThriftServiceHandler : virtual public ThriftServiceIf {
 public:
  ThriftServiceHandler() {
    // Your initialization goes here
  }

  void sendRequest(const RadiusRequest& req)
  {
    // Your implementation goes here
    printf("Received request\n");
    std::ofstream f;
    f.open("radius_attr.log", std::ios_base::app);
    if(f.is_open())
    {
        f << "----------------------------------------------------------------------" << std::endl;
        f << "ID: " << req.sourceId << std::endl;
        f << "Timestamp(ms): " << req.captureTimestamp << std::endl;
        f << std::endl << "Radius Attributes Request:" << std::endl;
        for(const auto& attr : req.avpRequestList)
        {
            f << "AttrCode: " << static_cast<uint>(attr.type) << " AttrValue: " << attr.value << std::endl;
        }
        f << std::endl << "Radius Attributes Response:" << std::endl;
        for(const auto& attr : req.avpResponseList)
        {
            f << "AttrCode: " << static_cast<uint>(attr.type) << " AttrValue: " << attr.value << std::endl;
        }
        f << std::endl;
        f.close();
    }
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ThriftServiceHandler> handler(new ThriftServiceHandler());
  shared_ptr<TProcessor> processor(new ThriftServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

