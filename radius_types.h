/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef radius_TYPES_H
#define radius_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace RadiusThrift {


class RadiusAvp {
 public:

  static const char* ascii_fingerprint; // = "A6609EAC7CD2A291DFDA43A4A8D65B03";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0x60,0x9E,0xAC,0x7C,0xD2,0xA2,0x91,0xDF,0xDA,0x43,0xA4,0xA8,0xD6,0x5B,0x03};

  RadiusAvp() : type(0), value() {
  }

  virtual ~RadiusAvp() throw() {}

  int8_t type;
  std::string value;

  void __set_type(const int8_t val) {
    type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const RadiusAvp & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const RadiusAvp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RadiusAvp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RadiusAvp &a, RadiusAvp &b);

typedef struct _RadiusRequest__isset {
  _RadiusRequest__isset() : captureTimestamp(false), sourceId(false), avpRequestList(false), avpResponseList(false) {}
  bool captureTimestamp;
  bool sourceId;
  bool avpRequestList;
  bool avpResponseList;
} _RadiusRequest__isset;

class RadiusRequest {
 public:

  static const char* ascii_fingerprint; // = "BF861F514ADD40D94AF267398B23A074";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x86,0x1F,0x51,0x4A,0xDD,0x40,0xD9,0x4A,0xF2,0x67,0x39,0x8B,0x23,0xA0,0x74};

  RadiusRequest() : captureTimestamp(0), sourceId() {
  }

  virtual ~RadiusRequest() throw() {}

  int64_t captureTimestamp;
  std::string sourceId;
  std::vector<RadiusAvp>  avpRequestList;
  std::vector<RadiusAvp>  avpResponseList;

  _RadiusRequest__isset __isset;

  void __set_captureTimestamp(const int64_t val) {
    captureTimestamp = val;
  }

  void __set_sourceId(const std::string& val) {
    sourceId = val;
  }

  void __set_avpRequestList(const std::vector<RadiusAvp> & val) {
    avpRequestList = val;
  }

  void __set_avpResponseList(const std::vector<RadiusAvp> & val) {
    avpResponseList = val;
  }

  bool operator == (const RadiusRequest & rhs) const
  {
    if (!(captureTimestamp == rhs.captureTimestamp))
      return false;
    if (!(sourceId == rhs.sourceId))
      return false;
    if (!(avpRequestList == rhs.avpRequestList))
      return false;
    if (!(avpResponseList == rhs.avpResponseList))
      return false;
    return true;
  }
  bool operator != (const RadiusRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RadiusRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RadiusRequest &a, RadiusRequest &b);

} // namespace

#endif
