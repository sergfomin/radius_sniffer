/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftService_H
#define ThriftService_H

#include <thrift/TDispatchProcessor.h>
#include "radius_types.h"

namespace RadiusThrift {

class ThriftServiceIf {
 public:
  virtual ~ThriftServiceIf() {}
  virtual void sendRequest(const RadiusRequest& req) = 0;
};

class ThriftServiceIfFactory {
 public:
  typedef ThriftServiceIf Handler;

  virtual ~ThriftServiceIfFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftServiceIf* /* handler */) = 0;
};

class ThriftServiceIfSingletonFactory : virtual public ThriftServiceIfFactory {
 public:
  ThriftServiceIfSingletonFactory(const boost::shared_ptr<ThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~ThriftServiceIfSingletonFactory() {}

  virtual ThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftServiceIf> iface_;
};

class ThriftServiceNull : virtual public ThriftServiceIf {
 public:
  virtual ~ThriftServiceNull() {}
  void sendRequest(const RadiusRequest& /* req */) {
    return;
  }
};

typedef struct _ThriftService_sendRequest_args__isset {
  _ThriftService_sendRequest_args__isset() : req(false) {}
  bool req;
} _ThriftService_sendRequest_args__isset;

class ThriftService_sendRequest_args {
 public:

  ThriftService_sendRequest_args() {
  }

  virtual ~ThriftService_sendRequest_args() throw() {}

  RadiusRequest req;

  _ThriftService_sendRequest_args__isset __isset;

  void __set_req(const RadiusRequest& val) {
    req = val;
  }

  bool operator == (const ThriftService_sendRequest_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const ThriftService_sendRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_sendRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_sendRequest_pargs {
 public:


  virtual ~ThriftService_sendRequest_pargs() throw() {}

  const RadiusRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_sendRequest_result {
 public:

  ThriftService_sendRequest_result() {
  }

  virtual ~ThriftService_sendRequest_result() throw() {}


  bool operator == (const ThriftService_sendRequest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftService_sendRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftService_sendRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftService_sendRequest_presult {
 public:


  virtual ~ThriftService_sendRequest_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftServiceClient : virtual public ThriftServiceIf {
 public:
  ThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendRequest(const RadiusRequest& req);
  void send_sendRequest(const RadiusRequest& req);
  void recv_sendRequest();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThriftServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftServiceProcessor(boost::shared_ptr<ThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["sendRequest"] = &ThriftServiceProcessor::process_sendRequest;
  }

  virtual ~ThriftServiceProcessor() {}
};

class ThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftServiceProcessorFactory(const ::boost::shared_ptr< ThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftServiceIfFactory > handlerFactory_;
};

class ThriftServiceMultiface : virtual public ThriftServiceIf {
 public:
  ThriftServiceMultiface(std::vector<boost::shared_ptr<ThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftServiceIf> > ifaces_;
  ThriftServiceMultiface() {}
  void add(boost::shared_ptr<ThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendRequest(const RadiusRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendRequest(req);
    }
    ifaces_[i]->sendRequest(req);
  }

};

} // namespace

#endif
